# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tss/v1beta1/genesis.proto, tss/v1beta1/query.proto, tss/v1beta1/tss.proto, tss/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ReplacementStatus(betterproto.Enum):
    """
    ReplacementStatus is an enumeration of the possible statuses of a group
    replacement process.
    """

    REPLACEMENT_STATUS_UNSPECIFIED = 0
    """
    REPLACEMENT_STATUS_UNSPECIFIED is the status of a group replacement that
    has not been specified.
    """

    REPLACEMENT_STATUS_WAITING = 1
    """
    REPLACEMENT_STATUS_WAITING is the status of a group replacement that is
    waiting to be replaced in the protocol.
    """

    REPLACEMENT_STATUS_SUCCESS = 2
    """
    REPLACEMENT_STATUS_SUCCESS is the status of a group replacement that has
    success in the protocol.
    """

    REPLACEMENT_STATUS_FALLEN = 3
    """
    REPLACEMENT_STATUS_FALLEN is the status of a group replacement that has
    fallen out of the protocol.
    """


class SigningStatus(betterproto.Enum):
    """
    SigningStatus is an enumeration of the possible statuses of a singing.
    """

    SIGNING_STATUS_UNSPECIFIED = 0
    """
    SIGNING_STATUS_UNSPECIFIED is the status of a signing that has not been
    specified.
    """

    SIGNING_STATUS_WAITING = 1
    """
    SIGNING_STATUS_WAITING is the status of a signing that is waiting to be
    signed in the protocol.
    """

    SIGNING_STATUS_SUCCESS = 2
    """
    SIGNING_STATUS_SUCCESS is the status of a signing that has success in the
    protocol.
    """

    SIGNING_STATUS_EXPIRED = 3
    """
    SIGNING_STATUS_EXPIRED is the status of a signing that has expired in the
    protocol.
    """

    SIGNING_STATUS_FALLEN = 4
    """
    SIGNING_STATUS_FALLEN is the status of a signing that has fallen out of the
    protocol.
    """


class MemberStatus(betterproto.Enum):
    """MemberStatus is an enumeration of the possible statuses of a member."""

    MEMBER_STATUS_UNSPECIFIED = 0
    """MEMBER_STATUS_UNSPECIFIED is unknown status."""

    MEMBER_STATUS_ACTIVE = 1
    """MEMBER_STATUS_ACTIVE is the active status."""

    MEMBER_STATUS_INACTIVE = 2
    """MEMBER_STATUS_INACTIVE is the inactive status."""

    MEMBER_STATUS_JAIL = 3
    """MEMBER_STATUS_JAIL is the status when member is jailed."""


class GroupStatus(betterproto.Enum):
    """GroupStatus is an enumeration of the possible statuses of a group."""

    GROUP_STATUS_UNSPECIFIED = 0
    """
    GROUP_STATUS_UNSPECIFIED is the status of a group that has not been
    specified.
    """

    GROUP_STATUS_ROUND_1 = 1
    """
    GROUP_STATUS_ROUND_1 is the status of a group that is in the first round of
    the protocol.
    """

    GROUP_STATUS_ROUND_2 = 2
    """
    GROUP_STATUS_ROUND_2 is the status of a group that is in the second round
    of the protocol.
    """

    GROUP_STATUS_ROUND_3 = 3
    """
    GROUP_STATUS_ROUND_3 is the status of a group that is in the third round of
    the protocol.
    """

    GROUP_STATUS_ACTIVE = 4
    """
    GROUP_STATUS_ACTIVE is the status of a group that is actively participating
    in the protocol.
    """

    GROUP_STATUS_EXPIRED = 5
    """
    GROUP_STATUS_EXPIRED is the status of a group that has expired in the
    protocol.
    """

    GROUP_STATUS_FALLEN = 6
    """
    GROUP_STATUS_FALLEN is the status of a group that has fallen out of the
    protocol.
    """


class ComplaintStatus(betterproto.Enum):
    """ComplaintStatus represents the status of a complaint."""

    COMPLAINT_STATUS_UNSPECIFIED = 0
    """
    COMPLAINT_STATUS_UNSPECIFIED represents an undefined status of the
    complaint.
    """

    COMPLAINT_STATUS_SUCCESS = 1
    """COMPLAINT_STATUS_SUCCESS represents a successful complaint."""

    COMPLAINT_STATUS_FAILED = 2
    """COMPLAINT_STATUS_FAILED represents a failed complaint."""


class PrefixMsgType(betterproto.Enum):
    """
    PrefixMsgType is an enumeration of the possible prefixes of a singing msg.
    """

    PREFIX_UNSPECIFIED_MSG = 0
    """
    PREFIX_UNSPECIFIED_MSG is the type of prefix that has not been specified.
    """

    PREFIX_TEXT_MSG = 1
    """
    PREFIX_TEXT_MSG is the type of prefix that signs a text msg in the
    protocol.
    """

    PREFIX_REPLACE_GROUP_MSG = 2
    """
    PREFIX_REPLACE_GROUP_MSG is the type of prefix that signs a replace group
    msg in the protocol.
    """

    PREFIX_ORACLE_MSG = 3
    """
    PREFIX_ORACLE_MSG is the type of prefix that signs an oracle result msg in
    the protocol.
    """


@dataclass(eq=False, repr=False)
class Group(betterproto.Message):
    """
    Group is a type representing a participant group in a Distributed Key
    Generation or signing process.
    """

    group_id: int = betterproto.uint64_field(1)
    """group_id is the unique identifier of the group."""

    size: int = betterproto.uint64_field(2)
    """size is the number of members in the group."""

    threshold: int = betterproto.uint64_field(3)
    """
    threshold is the minimum number of members needed to generate a valid
    signature.
    """

    pub_key: bytes = betterproto.bytes_field(4)
    """
    pub_key is the public key generated by the group after successful
    completion of the DKG process.
    """

    status: "GroupStatus" = betterproto.enum_field(5)
    """
    status represents the current stage of the group in the DKG or signing
    process.
    """

    fee: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(6)
    """fee is the tokens that will be paid per signing."""

    latest_replacement_id: int = betterproto.uint64_field(7)
    """latest_replacement_id is the latest replacement ID of the group."""

    created_height: int = betterproto.uint64_field(8)
    """created_height is the block height when the group was created."""


@dataclass(eq=False, repr=False)
class Replacement(betterproto.Message):
    """
    Replacement represents a group that will replaced with another group in the
    replacement process.
    """

    id: int = betterproto.uint64_field(1)
    """id is the unique identifier of the replacement."""

    signing_id: int = betterproto.uint64_field(2)
    """signing_id is the unique identifier of the signing process."""

    from_group_id: int = betterproto.uint64_field(3)
    """from_group_id is the ID of the group that want to replace."""

    from_pub_key: bytes = betterproto.bytes_field(4)
    """from_pub_key is the public key of the group that want to replace."""

    to_group_id: int = betterproto.uint64_field(5)
    """
    to_group_id is the ID of the group that will take the place of another
    group.
    """

    to_pub_key: bytes = betterproto.bytes_field(6)
    """
    to_pub_key is the public key of the group that will take the place of
    another group.
    """

    status: "ReplacementStatus" = betterproto.enum_field(7)
    """
    status is an enumeration of the possible statuses of a group replacement
    process.
    """

    exec_time: datetime = betterproto.message_field(8)
    """
    exec_time is the time that will be substituted in place of the group.
    """


@dataclass(eq=False, repr=False)
class Round1Info(betterproto.Message):
    """
    Round1Info contains all necessary information for handling round 1 of the
    DKG process.
    """

    member_id: int = betterproto.uint64_field(1)
    """member_id is the unique identifier of a group member."""

    coefficient_commits: List[bytes] = betterproto.bytes_field(2)
    """
    coefficients_commits is a list of commitments to the coefficients of the
    member's secret polynomial.
    """

    one_time_pub_key: bytes = betterproto.bytes_field(3)
    """
    one_time_pub_key is the one-time public key used by the member to encrypt
    secret shares.
    """

    a0_signature: bytes = betterproto.bytes_field(4)
    """
    a0_signature is the member's signature on the first coefficient of its
    secret polynomial.
    """

    one_time_signature: bytes = betterproto.bytes_field(5)
    """
    one_time_signature is the member's signature on its one-time public key.
    """


@dataclass(eq=False, repr=False)
class Round2Info(betterproto.Message):
    """
    Round2Info contains all necessary information for handling round 2 of the
    DKG process.
    """

    member_id: int = betterproto.uint64_field(1)
    """member_id is the unique identifier of a group member."""

    encrypted_secret_shares: List[bytes] = betterproto.bytes_field(2)
    """
    encrypted_secret_shares is a list of secret shares encrypted under the
    public keys of other members.
    """


@dataclass(eq=False, repr=False)
class De(betterproto.Message):
    """
    DE contains the public parts of a member's decryption and encryption keys.
    """

    pub_d: bytes = betterproto.bytes_field(1)
    """pub_d is the public value of own commitment (D)."""

    pub_e: bytes = betterproto.bytes_field(2)
    """pub_e is the public value of own commitment (E)."""


@dataclass(eq=False, repr=False)
class DeQueue(betterproto.Message):
    """DEQueue is a simple queue data structure for holding DE objects."""

    head: int = betterproto.uint64_field(1)
    """head is the index of the first element in the queue."""

    tail: int = betterproto.uint64_field(2)
    """tail is the index of the last element in the queue."""


@dataclass(eq=False, repr=False)
class Signing(betterproto.Message):
    """
    Signing contains all necessary information for handling a signing request.
    """

    id: int = betterproto.uint64_field(1)
    """id is the unique identifier of the signing."""

    group_id: int = betterproto.uint64_field(2)
    """group_id is the unique identifier of the group."""

    group_pub_key: bytes = betterproto.bytes_field(3)
    """group_pub_key is the public key of the group that sign this message."""

    assigned_members: List["AssignedMember"] = betterproto.message_field(4)
    """
    assigned_members is a list of members assigned to the signing process.
    """

    message: bytes = betterproto.bytes_field(5)
    """message is the message to be signed."""

    group_pub_nonce: bytes = betterproto.bytes_field(6)
    """
    group_pub_nonce is the public nonce generated by the group for this signing
    process.
    """

    signature: bytes = betterproto.bytes_field(7)
    """signature is the group's signature on the message."""

    fee: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(8)
    """fee is the total tokens that will be paid for this signing"""

    status: "SigningStatus" = betterproto.enum_field(9)
    """
    status represents the current stage of the signing in the signing process.
    """

    created_height: int = betterproto.uint64_field(10)
    """created_height is the block height when the signing was created."""

    requester: str = betterproto.string_field(11)
    """requester is the address of requester who paid for the TSS fee."""


@dataclass(eq=False, repr=False)
class AssignedMember(betterproto.Message):
    """
    AssignedMember is a type representing a member that has been assigned to a
    signing process.
    """

    member_id: int = betterproto.uint64_field(1)
    """member_id is the unique identifier of the member."""

    address: str = betterproto.string_field(2)
    """member is the human-readable name of the member."""

    pub_key: bytes = betterproto.bytes_field(3)
    """pub_key is the public part of a member."""

    pub_d: bytes = betterproto.bytes_field(4)
    """pub_d is the public part of a member's decryption key."""

    pub_e: bytes = betterproto.bytes_field(5)
    """pub_e is the public part of a member's encryption key."""

    binding_factor: bytes = betterproto.bytes_field(6)
    """
    binding_factor is the binding factor of the member for the signing process.
    """

    pub_nonce: bytes = betterproto.bytes_field(7)
    """pub_nonce is the public nonce of the member for the signing process."""


@dataclass(eq=False, repr=False)
class PendingSignings(betterproto.Message):
    """
    PendingSignings is a list of all signing processes that are currently
    pending.
    """

    signing_ids: List[int] = betterproto.uint64_field(1)
    """signing_ids is a list of identifiers for the signing processes."""


@dataclass(eq=False, repr=False)
class Member(betterproto.Message):
    """Member is a type representing a member of the group."""

    id: int = betterproto.uint64_field(1)
    """id is the unique identifier of a member."""

    group_id: int = betterproto.uint64_field(2)
    """group_id is the group id of this member."""

    address: str = betterproto.string_field(3)
    """address is the address of the member."""

    pub_key: bytes = betterproto.bytes_field(4)
    """pub_key is the public key of the member."""

    is_malicious: bool = betterproto.bool_field(5)
    """
    is_malicious is a boolean flag indicating whether the member is considered
    malicious.
    """


@dataclass(eq=False, repr=False)
class Status(betterproto.Message):
    """Status maintains whether a member is an active member."""

    address: str = betterproto.string_field(1)
    """address is the address of the member."""

    status: "MemberStatus" = betterproto.enum_field(2)
    """status represents the current status of the member"""

    since: datetime = betterproto.message_field(3)
    """
    since is a block timestamp when a member has been
    activated/deactivated/jailed
    """

    last_active: datetime = betterproto.message_field(4)
    """last_active is a latest block timestamp when a member is active"""


@dataclass(eq=False, repr=False)
class Confirm(betterproto.Message):
    """
    Confirm is a message type used to confirm participation in the protocol.
    """

    member_id: int = betterproto.uint64_field(1)
    """member_id is the unique identifier of a group member."""

    own_pub_key_sig: bytes = betterproto.bytes_field(2)
    """own_pub_key_sig is a signature over the member's own public key."""


@dataclass(eq=False, repr=False)
class Complaint(betterproto.Message):
    """
    Complaint is a message type used to issue a complaint against a member.
    """

    complainant: int = betterproto.uint64_field(1)
    """complainant is the member issuing the complaint."""

    respondent: int = betterproto.uint64_field(2)
    """respondent is the member against whom the complaint is issued."""

    key_sym: bytes = betterproto.bytes_field(3)
    """
    key_sym is a symmetric key between respondent's private key and
    respondent's public key.
    """

    signature: bytes = betterproto.bytes_field(4)
    """
    signature is the complaint signature that can do a symmetric key validation
    and complaint verification.
    """


@dataclass(eq=False, repr=False)
class ComplaintWithStatus(betterproto.Message):
    """
    ComplaintWithStatus contains information about a complaint with its status.
    """

    complaint: "Complaint" = betterproto.message_field(1)
    """complaint is the information about the complaint."""

    complaint_status: "ComplaintStatus" = betterproto.enum_field(2)
    """complaint_status is the status of the complaint."""


@dataclass(eq=False, repr=False)
class ComplaintsWithStatus(betterproto.Message):
    """
    ComplaintsWithStatus contains information about multiple complaints and
    their status from a single member.
    """

    member_id: int = betterproto.uint64_field(1)
    """member_id is the identifier of the member filing the complaints."""

    complaints_with_status: List["ComplaintWithStatus"] = betterproto.message_field(2)
    """
    complaints_with_status is the list of complaints with their status from
    this member.
    """


@dataclass(eq=False, repr=False)
class PendingProcessGroups(betterproto.Message):
    """
    PendingProcessGroups is a list of groups that are waiting to be processed.
    """

    group_ids: List[int] = betterproto.uint64_field(1)
    """group_ids is a list of group IDs."""


@dataclass(eq=False, repr=False)
class PendingProcessSignings(betterproto.Message):
    """
    PendingProcessSignigns is a list of signings that are waiting to be
    processed.
    """

    signing_ids: List[int] = betterproto.uint64_field(1)
    """signing_ids is a list of signing IDs."""


@dataclass(eq=False, repr=False)
class PartialSignature(betterproto.Message):
    """
    PartialSignature contains information about a member's partial signature.
    """

    member_id: int = betterproto.uint64_field(1)
    """
    member_id is the identifier of the member providing the partial signature.
    """

    signature: bytes = betterproto.bytes_field(2)
    """signature is the partial signature provided by this member."""


@dataclass(eq=False, repr=False)
class TextRequestingSignature(betterproto.Message):
    """TextRequestingSignature defines a standard request signature."""

    message: bytes = betterproto.bytes_field(1)
    """message is the data that needs to be signed."""


@dataclass(eq=False, repr=False)
class EvmSignature(betterproto.Message):
    """EVMSignature defines a signature in the EVM format."""

    r_address: bytes = betterproto.bytes_field(1)
    """r_address is the address of the nonce for using in the contract."""

    signature: bytes = betterproto.bytes_field(2)
    """signature is the signature part for using in the contract."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the tss module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the paramiters of the module."""

    group_count: int = betterproto.uint64_field(2)
    """group_count defines the number of groups."""

    groups: List["Group"] = betterproto.message_field(3)
    """groups is an array containing information about each group."""

    members: List["Member"] = betterproto.message_field(4)
    """
    members is an array containing information about each member of groups.
    """

    signing_count: int = betterproto.uint64_field(5)
    """signing_count defines the number of signers."""

    signings: List["Signing"] = betterproto.message_field(6)
    """signings is an array containing information about each signing."""

    replacement_count: int = betterproto.uint64_field(7)
    """replacement_count defines the number of replacements."""

    replacements: List["Replacement"] = betterproto.message_field(8)
    """
    replacements is an array containing information about each replacement.
    """

    de_queues_genesis: List["DeQueueGenesis"] = betterproto.message_field(9)
    """
    de_queues_genesis is an array containing the de queues of all the
    addressres.
    """

    des_genesis: List["DeGenesis"] = betterproto.message_field(10)
    """des_genesis is an array containing the des of all the addressres."""

    statuses: List["Status"] = betterproto.message_field(11)
    """statuses is an array containing status of all addresses"""


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the set of module parameters."""

    max_group_size: int = betterproto.uint64_field(1)
    """max_group_size is the maximum of the member capacity of the group."""

    max_d_e_size: int = betterproto.uint64_field(2)
    """max_d_e_size is the maximum of the de capacity of the member."""

    creating_period: int = betterproto.uint64_field(3)
    """
    creating_period is the number of blocks allowed to creating group
    signature.
    """

    signing_period: int = betterproto.uint64_field(4)
    """signing_period is the number of blocks allowed to sign."""

    active_duration: timedelta = betterproto.message_field(5)
    """
    active_duration is the duration where a member can be active without
    interaction.
    """

    inactive_penalty_duration: timedelta = betterproto.message_field(6)
    """
    inactive_penalty_duration is the duration where a member cannot activate
    back after inactive.
    """

    jail_penalty_duration: timedelta = betterproto.message_field(7)
    """
    jail_penalty_duration is the duration where a member cannot activate back
    after jail.
    """

    reward_percentage: int = betterproto.uint64_field(8)
    """
    reward_percentage is the percentage of block rewards allocated to active
    TSS validators after being allocated to oracle rewards.
    """


@dataclass(eq=False, repr=False)
class DeQueueGenesis(betterproto.Message):
    """
    DEQueueGenesis defines an account address and de queue used in the tss
    module's genesis state.
    """

    address: str = betterproto.string_field(1)
    """address is the address of the de holder."""

    de_queue: "DeQueue" = betterproto.message_field(2)
    """de_queue defines the different de queue this balance holds."""


@dataclass(eq=False, repr=False)
class DeGenesis(betterproto.Message):
    """
    DEGenesis defines an account address and de pair used in the tss module's
    genesis state.
    """

    address: str = betterproto.string_field(1)
    """address is the address of the de holder."""

    index: int = betterproto.uint64_field(2)
    """index is the index for store de of the address"""

    de: "De" = betterproto.message_field(3)
    """de defines the difference de this balance holds."""


@dataclass(eq=False, repr=False)
class MsgCreateGroup(betterproto.Message):
    """MsgCreateGroup is the Msg/CreateGroup request type."""

    members: List[str] = betterproto.string_field(1)
    """members is a list of members in this group."""

    threshold: int = betterproto.uint64_field(2)
    """
    threshold is a minimum number of members required to produce a signature.
    """

    fee: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """fee is the tokens that will be paid per signing."""

    authority: str = betterproto.string_field(4)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """


@dataclass(eq=False, repr=False)
class MsgCreateGroupResponse(betterproto.Message):
    """MsgCreateGroupResponse is the Msg/CreateGroup response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgReplaceGroup(betterproto.Message):
    """MsgReplaceGroup is the Msg/ReplaceGroup request type."""

    from_group_id: int = betterproto.uint64_field(1)
    """
    from_group_id is the ID of the group that want to replace, and subsequently
    remove this group.
    """

    to_group_id: int = betterproto.uint64_field(2)
    """
    to_group_id is the ID of the group that will take the place of another
    group.
    """

    exec_time: datetime = betterproto.message_field(3)
    """
    exec_time is the time that will be substituted in place of the group.
    """

    authority: str = betterproto.string_field(4)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """


@dataclass(eq=False, repr=False)
class MsgReplaceGroupResponse(betterproto.Message):
    """MsgReplaceGroupResponse is the Msg/ReplaceGroup response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateGroupFee(betterproto.Message):
    """MsgUpdateGroupFee is the Msg/UpdateGroupFee request type."""

    group_id: int = betterproto.uint64_field(1)
    """group_id is the ID of the group that want to update."""

    fee: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(2)
    """fee is the tokens that will be paid per signing."""

    authority: str = betterproto.string_field(3)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """


@dataclass(eq=False, repr=False)
class MsgUpdateGroupFeeResponse(betterproto.Message):
    """MsgUpdateGroupFeeResponse is the Msg/UpdateGroupFee response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgSubmitDkgRound1(betterproto.Message):
    """MsgSubmitDKGRound1 is the Msg/MsgSubmitDKGRound1 request type."""

    group_id: int = betterproto.uint64_field(1)
    """group_id is ID of the group."""

    round1_info: "Round1Info" = betterproto.message_field(2)
    """round1_info is all data that require to handle round 1."""

    address: str = betterproto.string_field(3)
    """
    address is the signer of this message. Must be a member of this group.
    """


@dataclass(eq=False, repr=False)
class MsgSubmitDkgRound1Response(betterproto.Message):
    """MsgSubmitDKGRound1Response is the Msg/SubmitDKGRound1 response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgSubmitDkgRound2(betterproto.Message):
    """MsgSubmitDKGRound2 is the Msg/SubmitDKGRound2 request type."""

    group_id: int = betterproto.uint64_field(1)
    """group_id is ID of the group."""

    round2_info: "Round2Info" = betterproto.message_field(2)
    """round2_info is all data that is required to handle round 2."""

    address: str = betterproto.string_field(3)
    """
    address is the signer of this message. Must be a member of this group.
    """


@dataclass(eq=False, repr=False)
class MsgSubmitDkgRound2Response(betterproto.Message):
    """
    MsgSubmitDKGRound2Response is response data for MsgSubmitDKGRound2 message
    """

    pass


@dataclass(eq=False, repr=False)
class MsgComplain(betterproto.Message):
    """
    MsgComplain is a message used to complain about malicious actors in the
    group.
    """

    group_id: int = betterproto.uint64_field(1)
    """group_id is ID of the group."""

    complaints: List["Complaint"] = betterproto.message_field(2)
    """complaints is a list of complaints."""

    address: str = betterproto.string_field(3)
    """
    address is the signer of this message. Must be a member of this group.
    """


@dataclass(eq=False, repr=False)
class MsgComplainResponse(betterproto.Message):
    """MsgComplainResponse is response data for MsgComplain message"""

    pass


@dataclass(eq=False, repr=False)
class MsgConfirm(betterproto.Message):
    """MsgConfirm is a message used to confirm own public key."""

    group_id: int = betterproto.uint64_field(1)
    """group_id is ID of the group."""

    member_id: int = betterproto.uint64_field(2)
    """member_id is ID of the address."""

    own_pub_key_sig: bytes = betterproto.bytes_field(3)
    """
    own_pub_key_sig is a signature of the member_i on its own PubKey to confirm
    that the address is able to derive the PubKey.
    """

    address: str = betterproto.string_field(4)
    """
    address is the signer of this message. Must be a member of this group.
    """


@dataclass(eq=False, repr=False)
class MsgConfirmResponse(betterproto.Message):
    """MsgConfirmResponse is response data for MsgConfirm message"""

    pass


@dataclass(eq=False, repr=False)
class MsgSubmitDEs(betterproto.Message):
    """MsgSubmitDEs is a message used to submit a list of DEs."""

    des: List["De"] = betterproto.message_field(1)
    """des is a list of DE objects."""

    address: str = betterproto.string_field(2)
    """address is the signer of this submission message."""


@dataclass(eq=False, repr=False)
class MsgSubmitDEsResponse(betterproto.Message):
    """MsgSubmitDEsResponse is response data for MsgSubmitDEs message"""

    pass


@dataclass(eq=False, repr=False)
class MsgRequestSignature(betterproto.Message):
    """
    MsgRequestSignature is a request message used for initiating the signing
    process.
    """

    group_id: int = betterproto.uint64_field(1)
    """group_id is the unique identifier of the group."""

    content: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)
    """
    content defines an interface that a request signature type must implement.
    """

    fee_limit: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """feeLimit is the maximum tokens that will be paid for this request."""

    sender: str = betterproto.string_field(4)
    """sender is the requester of the signing process."""


@dataclass(eq=False, repr=False)
class MsgRequestSignatureResponse(betterproto.Message):
    """
    MsgRequestSignatureResponse is response data for MsgRequestSignature
    message
    """

    pass


@dataclass(eq=False, repr=False)
class MsgSubmitSignature(betterproto.Message):
    """MsgSubmitSignature is a message used to submitting signature data."""

    signing_id: int = betterproto.uint64_field(1)
    """signing_id is the unique identifier of the signing process."""

    member_id: int = betterproto.uint64_field(2)
    """member_id is the unique identifier of the group address."""

    signature: bytes = betterproto.bytes_field(3)
    """signature is the signature produced by the address."""

    address: str = betterproto.string_field(4)
    """
    address is the signer of this signing message, who must be a member of the
    group.
    """


@dataclass(eq=False, repr=False)
class MsgSubmitSignatureResponse(betterproto.Message):
    """
    MsgSubmitSignatureResponse is response data for MsgSubmitSignature message
    """

    pass


@dataclass(eq=False, repr=False)
class MsgActivate(betterproto.Message):
    """
    MsgActivate is a message used to activate the status of the group's
    address.
    """

    address: str = betterproto.string_field(1)
    """
    address is the signer of this message, who must be a member of the group.
    """


@dataclass(eq=False, repr=False)
class MsgActivateResponse(betterproto.Message):
    """MsgActivateResponse is response data for MsgActivate message"""

    pass


@dataclass(eq=False, repr=False)
class MsgHealthCheck(betterproto.Message):
    """
    MsgHealthCheck is a message used to show active status if the address is
    still active.
    """

    address: str = betterproto.string_field(1)
    """
    address is the signer of this message, who must be a member of the group.
    """


@dataclass(eq=False, repr=False)
class MsgHealthCheckResponse(betterproto.Message):
    """MsgHealthCheckResponse is response data for MsgHealthCheck message"""

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams is the Msg/UpdateParams request type."""

    params: "Params" = betterproto.message_field(1)
    """params defines the x/tss parameters to update."""

    authority: str = betterproto.string_field(2)
    """authority is the address of the governance account."""


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryCountsRequest(betterproto.Message):
    """QueryCountsRequest is request type for the Query/Count RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryCountsResponse(betterproto.Message):
    """QueryCountsResponse is response type for the Query/Count RPC method."""

    group_count: int = betterproto.uint64_field(1)
    """group_count is total number of group available on the chain"""

    signing_count: int = betterproto.uint64_field(2)
    """
    signing_count is total number of signing request submitted to the chain
    """

    replacement_count: int = betterproto.uint64_field(3)
    """
    ReplacementCount is total number of replacement groups submitted to the
    chain
    """


@dataclass(eq=False, repr=False)
class QueryGroupRequest(betterproto.Message):
    """QueryGroupRequest is the request type for the Query/Group RPC method"""

    group_id: int = betterproto.uint64_field(1)
    """group_id defines the unique id of the group."""


@dataclass(eq=False, repr=False)
class QueryGroupResponse(betterproto.Message):
    """
    QueryGroupResponse is the response type for the Query/Group RPC method
    """

    group: "Group" = betterproto.message_field(1)
    """group defines the group object containing group information."""

    dkg_context: bytes = betterproto.bytes_field(2)
    """dkg_context defines the DKG context data."""

    members: List["Member"] = betterproto.message_field(3)
    """members is the list of members in the group."""

    statuses: List["Status"] = betterproto.message_field(4)
    """members is the list of members in the group."""

    round1_infos: List["Round1Info"] = betterproto.message_field(5)
    """round1_infos is the list of Round 1 information."""

    round2_infos: List["Round2Info"] = betterproto.message_field(6)
    """round2_infos is the list of Round 2 information."""

    complaints_with_status: List["ComplaintsWithStatus"] = betterproto.message_field(7)
    """complaints_with_status is the list of complaints with status."""

    confirms: List["Confirm"] = betterproto.message_field(8)
    """confirms is the list of confirms."""


@dataclass(eq=False, repr=False)
class QueryMembersRequest(betterproto.Message):
    """
    QueryMembersRequest is the request type for the Query/Members RPC method
    """

    group_id: int = betterproto.uint64_field(1)
    """group_id defines the unique id of the group."""


@dataclass(eq=False, repr=False)
class QueryMembersResponse(betterproto.Message):
    """
    QueryMembersResponse is the response type for the Query/Members RPC method
    """

    members: List["Member"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryIsGranteeRequest(betterproto.Message):
    """
    QueryIsSignerRequest is request type for the Query/IsGrantee RPC method.
    """

    granter: str = betterproto.string_field(1)
    """Granter is a granter address"""

    grantee: str = betterproto.string_field(2)
    """Grantee is a grantee address"""


@dataclass(eq=False, repr=False)
class QueryIsGranteeResponse(betterproto.Message):
    """
    QueryIsGranteeResponse is response type for the Query/IsGrantee RPC method.
    """

    is_grantee: bool = betterproto.bool_field(1)
    """IsGrantee is true if this account has been granted by granter"""


@dataclass(eq=False, repr=False)
class QueryDeRequest(betterproto.Message):
    """QueryDERequest is the request type for the Query/DE RPC method."""

    address: str = betterproto.string_field(1)
    """address is the address for the request."""

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines pagination settings for the request."""


@dataclass(eq=False, repr=False)
class QueryDeResponse(betterproto.Message):
    """QueryDEResponse is the response type for the Query/DE RPC method."""

    des: List["De"] = betterproto.message_field(1)
    """des is a list of DEs."""

    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines an pagination for the response."""


@dataclass(eq=False, repr=False)
class QueryPendingGroupsRequest(betterproto.Message):
    """
    QueryPendingGroupsRequest is the request type for the Query/PendingGroups
    RPC method.
    """

    address: str = betterproto.string_field(1)
    """address is the address for the request."""


@dataclass(eq=False, repr=False)
class QueryPendingGroupsResponse(betterproto.Message):
    """
    QueryPendingGroupsResponse is the response type for the Query/PendingGroups
    RPC method.
    """

    pending_groups: List[int] = betterproto.uint64_field(1)
    """pending_groups is a list of pending groups."""


@dataclass(eq=False, repr=False)
class QueryPendingSigningsRequest(betterproto.Message):
    """
    QueryPendingSigningsRequest is the request type for the
    Query/PendingSignings RPC method.
    """

    address: str = betterproto.string_field(1)
    """address is the address for the request."""


@dataclass(eq=False, repr=False)
class QueryPendingSigningsResponse(betterproto.Message):
    """
    QueryPendingSigningsResponse is the response type for the
    Query/PendingSignings RPC method.
    """

    pending_signings: List[int] = betterproto.uint64_field(1)
    """pending_signings is a list of pending signings."""


@dataclass(eq=False, repr=False)
class QuerySigningRequest(betterproto.Message):
    """
    QuerySigningRequest is the request type for the Query/Signing RPC method.
    """

    signing_id: int = betterproto.uint64_field(1)
    """id is the ID of the signing request."""


@dataclass(eq=False, repr=False)
class QuerySigningResponse(betterproto.Message):
    """
    QuerySigningResponse is the response type for the Query/Signing RPC method.
    """

    signing: "Signing" = betterproto.message_field(1)
    """signing is the signing request."""

    evm_signature: "EvmSignature" = betterproto.message_field(2)
    received_partial_signatures: List["PartialSignature"] = betterproto.message_field(3)
    """
    received_partial_signatures is a list of received partial signatures.
    """


@dataclass(eq=False, repr=False)
class QueryStatusesRequest(betterproto.Message):
    """
    QueryStatusesRequest is the request type for the Query/Statuses RPC method.
    """

    status: "MemberStatus" = betterproto.enum_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines pagination settings for the request."""


@dataclass(eq=False, repr=False)
class QueryStatusesResponse(betterproto.Message):
    """
    QueryStatusesResponse is the response type for the Query/Statuses RPC
    method.
    """

    statuses: List["Status"] = betterproto.message_field(1)
    """statuses is the statuses request."""

    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryStatusRequest(betterproto.Message):
    """
    QueryStatusRequest is the request type for the Query/Status RPC method.
    """

    address: str = betterproto.string_field(1)
    """address is the member address."""


@dataclass(eq=False, repr=False)
class QueryStatusResponse(betterproto.Message):
    """
    QueryStatusResponse is the response type for the Query/Status RPC method.
    """

    status: "Status" = betterproto.message_field(1)
    """status is the status request."""


@dataclass(eq=False, repr=False)
class QueryReplacementsRequest(betterproto.Message):
    """
    QueryReplacementsRequest is the request type for the Query/Replacements RPC
    method.
    """

    status: "ReplacementStatus" = betterproto.enum_field(1)
    """
    status is an enumeration of the possible statuses of a group replacement
    process.
    """

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryReplacementsResponse(betterproto.Message):
    """
    QueryReplacementsResponse is the response type for the Query/Replacements
    RPC method.
    """

    replacements: List["Replacement"] = betterproto.message_field(1)
    """replacements is a list of replacements."""

    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryReplacementRequest(betterproto.Message):
    """
    QueryReplacementRequest is the request type for the Query/Replacement RPC
    method.
    """

    id: int = betterproto.uint64_field(1)
    """id is the unique identifier of the replacement."""


@dataclass(eq=False, repr=False)
class QueryReplacementResponse(betterproto.Message):
    """
    QueryReplacementResponse is the response type for the Query/Replacement RPC
    method.
    """

    replacement: "Replacement" = betterproto.message_field(1)
    """
    replacement represents a group that will replaced with another group in the
    replacement process.
    """


class MsgStub(betterproto.ServiceStub):
    async def create_group(
        self,
        msg_create_group: "MsgCreateGroup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateGroupResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/CreateGroup",
            msg_create_group,
            MsgCreateGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replace_group(
        self,
        msg_replace_group: "MsgReplaceGroup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgReplaceGroupResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/ReplaceGroup",
            msg_replace_group,
            MsgReplaceGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_group_fee(
        self,
        msg_update_group_fee: "MsgUpdateGroupFee",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateGroupFeeResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/UpdateGroupFee",
            msg_update_group_fee,
            MsgUpdateGroupFeeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_dkg_round1(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitDkgRound1Response":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/SubmitDKGRound1",
            msg_submit_dkg_round1,
            MsgSubmitDkgRound1Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_dkg_round2(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitDkgRound2Response":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/SubmitDKGRound2",
            msg_submit_dkg_round2,
            MsgSubmitDkgRound2Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complain(
        self,
        msg_complain: "MsgComplain",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgComplainResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/Complain",
            msg_complain,
            MsgComplainResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def confirm(
        self,
        msg_confirm: "MsgConfirm",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgConfirmResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/Confirm",
            msg_confirm,
            MsgConfirmResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_d_es(
        self,
        msg_submit_d_es: "MsgSubmitDEs",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitDEsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/SubmitDEs",
            msg_submit_d_es,
            MsgSubmitDEsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def request_signature(
        self,
        msg_request_signature: "MsgRequestSignature",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRequestSignatureResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/RequestSignature",
            msg_request_signature,
            MsgRequestSignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_signature(
        self,
        msg_submit_signature: "MsgSubmitSignature",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitSignatureResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/SubmitSignature",
            msg_submit_signature,
            MsgSubmitSignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def activate(
        self,
        msg_activate: "MsgActivate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgActivateResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/Activate",
            msg_activate,
            MsgActivateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def health_check(
        self,
        msg_health_check: "MsgHealthCheck",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgHealthCheckResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/HealthCheck",
            msg_health_check,
            MsgHealthCheckResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def counts(
        self,
        query_counts_request: "QueryCountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCountsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Counts",
            query_counts_request,
            QueryCountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def group(
        self,
        query_group_request: "QueryGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGroupResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Group",
            query_group_request,
            QueryGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def members(
        self,
        query_members_request: "QueryMembersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMembersResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Members",
            query_members_request,
            QueryMembersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_grantee(
        self,
        query_is_grantee_request: "QueryIsGranteeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsGranteeResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/IsGrantee",
            query_is_grantee_request,
            QueryIsGranteeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def de(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDeResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/DE",
            query_de_request,
            QueryDeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pending_groups(
        self,
        query_pending_groups_request: "QueryPendingGroupsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPendingGroupsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/PendingGroups",
            query_pending_groups_request,
            QueryPendingGroupsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pending_signings(
        self,
        query_pending_signings_request: "QueryPendingSigningsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPendingSigningsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/PendingSignings",
            query_pending_signings_request,
            QueryPendingSigningsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def signing(
        self,
        query_signing_request: "QuerySigningRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySigningResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Signing",
            query_signing_request,
            QuerySigningResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def statuses(
        self,
        query_statuses_request: "QueryStatusesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStatusesResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Statuses",
            query_statuses_request,
            QueryStatusesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def status(
        self,
        query_status_request: "QueryStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStatusResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Status",
            query_status_request,
            QueryStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replacements(
        self,
        query_replacements_request: "QueryReplacementsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReplacementsResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Replacements",
            query_replacements_request,
            QueryReplacementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replacement(
        self,
        query_replacement_request: "QueryReplacementRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReplacementResponse":
        return await self._unary_unary(
            "/tss.v1beta1.Query/Replacement",
            query_replacement_request,
            QueryReplacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def create_group(
        self, msg_create_group: "MsgCreateGroup"
    ) -> "MsgCreateGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replace_group(
        self, msg_replace_group: "MsgReplaceGroup"
    ) -> "MsgReplaceGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_group_fee(
        self, msg_update_group_fee: "MsgUpdateGroupFee"
    ) -> "MsgUpdateGroupFeeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_dkg_round1(self) -> "MsgSubmitDkgRound1Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_dkg_round2(self) -> "MsgSubmitDkgRound2Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complain(self, msg_complain: "MsgComplain") -> "MsgComplainResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def confirm(self, msg_confirm: "MsgConfirm") -> "MsgConfirmResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_d_es(
        self, msg_submit_d_es: "MsgSubmitDEs"
    ) -> "MsgSubmitDEsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def request_signature(
        self, msg_request_signature: "MsgRequestSignature"
    ) -> "MsgRequestSignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_signature(
        self, msg_submit_signature: "MsgSubmitSignature"
    ) -> "MsgSubmitSignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def activate(self, msg_activate: "MsgActivate") -> "MsgActivateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def health_check(
        self, msg_health_check: "MsgHealthCheck"
    ) -> "MsgHealthCheckResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_group(
        self, stream: "grpclib.server.Stream[MsgCreateGroup, MsgCreateGroupResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_group(request)
        await stream.send_message(response)

    async def __rpc_replace_group(
        self, stream: "grpclib.server.Stream[MsgReplaceGroup, MsgReplaceGroupResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.replace_group(request)
        await stream.send_message(response)

    async def __rpc_update_group_fee(
        self,
        stream: "grpclib.server.Stream[MsgUpdateGroupFee, MsgUpdateGroupFeeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_group_fee(request)
        await stream.send_message(response)

    async def __rpc_submit_dkg_round1(
        self,
        stream: "grpclib.server.Stream[MsgSubmitDkgRound1, MsgSubmitDkgRound1Response]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_dkg_round1(request)
        await stream.send_message(response)

    async def __rpc_submit_dkg_round2(
        self,
        stream: "grpclib.server.Stream[MsgSubmitDkgRound2, MsgSubmitDkgRound2Response]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_dkg_round2(request)
        await stream.send_message(response)

    async def __rpc_complain(
        self, stream: "grpclib.server.Stream[MsgComplain, MsgComplainResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complain(request)
        await stream.send_message(response)

    async def __rpc_confirm(
        self, stream: "grpclib.server.Stream[MsgConfirm, MsgConfirmResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.confirm(request)
        await stream.send_message(response)

    async def __rpc_submit_d_es(
        self, stream: "grpclib.server.Stream[MsgSubmitDEs, MsgSubmitDEsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_d_es(request)
        await stream.send_message(response)

    async def __rpc_request_signature(
        self,
        stream: "grpclib.server.Stream[MsgRequestSignature, MsgRequestSignatureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.request_signature(request)
        await stream.send_message(response)

    async def __rpc_submit_signature(
        self,
        stream: "grpclib.server.Stream[MsgSubmitSignature, MsgSubmitSignatureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_signature(request)
        await stream.send_message(response)

    async def __rpc_activate(
        self, stream: "grpclib.server.Stream[MsgActivate, MsgActivateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.activate(request)
        await stream.send_message(response)

    async def __rpc_health_check(
        self, stream: "grpclib.server.Stream[MsgHealthCheck, MsgHealthCheckResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.health_check(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/tss.v1beta1.Msg/CreateGroup": grpclib.const.Handler(
                self.__rpc_create_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateGroup,
                MsgCreateGroupResponse,
            ),
            "/tss.v1beta1.Msg/ReplaceGroup": grpclib.const.Handler(
                self.__rpc_replace_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgReplaceGroup,
                MsgReplaceGroupResponse,
            ),
            "/tss.v1beta1.Msg/UpdateGroupFee": grpclib.const.Handler(
                self.__rpc_update_group_fee,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateGroupFee,
                MsgUpdateGroupFeeResponse,
            ),
            "/tss.v1beta1.Msg/SubmitDKGRound1": grpclib.const.Handler(
                self.__rpc_submit_dkg_round1,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitDkgRound1,
                MsgSubmitDkgRound1Response,
            ),
            "/tss.v1beta1.Msg/SubmitDKGRound2": grpclib.const.Handler(
                self.__rpc_submit_dkg_round2,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitDkgRound2,
                MsgSubmitDkgRound2Response,
            ),
            "/tss.v1beta1.Msg/Complain": grpclib.const.Handler(
                self.__rpc_complain,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgComplain,
                MsgComplainResponse,
            ),
            "/tss.v1beta1.Msg/Confirm": grpclib.const.Handler(
                self.__rpc_confirm,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgConfirm,
                MsgConfirmResponse,
            ),
            "/tss.v1beta1.Msg/SubmitDEs": grpclib.const.Handler(
                self.__rpc_submit_d_es,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitDEs,
                MsgSubmitDEsResponse,
            ),
            "/tss.v1beta1.Msg/RequestSignature": grpclib.const.Handler(
                self.__rpc_request_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRequestSignature,
                MsgRequestSignatureResponse,
            ),
            "/tss.v1beta1.Msg/SubmitSignature": grpclib.const.Handler(
                self.__rpc_submit_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitSignature,
                MsgSubmitSignatureResponse,
            ),
            "/tss.v1beta1.Msg/Activate": grpclib.const.Handler(
                self.__rpc_activate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgActivate,
                MsgActivateResponse,
            ),
            "/tss.v1beta1.Msg/HealthCheck": grpclib.const.Handler(
                self.__rpc_health_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgHealthCheck,
                MsgHealthCheckResponse,
            ),
            "/tss.v1beta1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def counts(
        self, query_counts_request: "QueryCountsRequest"
    ) -> "QueryCountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def group(
        self, query_group_request: "QueryGroupRequest"
    ) -> "QueryGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def members(
        self, query_members_request: "QueryMembersRequest"
    ) -> "QueryMembersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_grantee(
        self, query_is_grantee_request: "QueryIsGranteeRequest"
    ) -> "QueryIsGranteeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def de(self) -> "QueryDeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pending_groups(
        self, query_pending_groups_request: "QueryPendingGroupsRequest"
    ) -> "QueryPendingGroupsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pending_signings(
        self, query_pending_signings_request: "QueryPendingSigningsRequest"
    ) -> "QueryPendingSigningsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def signing(
        self, query_signing_request: "QuerySigningRequest"
    ) -> "QuerySigningResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def statuses(
        self, query_statuses_request: "QueryStatusesRequest"
    ) -> "QueryStatusesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def status(
        self, query_status_request: "QueryStatusRequest"
    ) -> "QueryStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replacements(
        self, query_replacements_request: "QueryReplacementsRequest"
    ) -> "QueryReplacementsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replacement(
        self, query_replacement_request: "QueryReplacementRequest"
    ) -> "QueryReplacementResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_counts(
        self, stream: "grpclib.server.Stream[QueryCountsRequest, QueryCountsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.counts(request)
        await stream.send_message(response)

    async def __rpc_group(
        self, stream: "grpclib.server.Stream[QueryGroupRequest, QueryGroupResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.group(request)
        await stream.send_message(response)

    async def __rpc_members(
        self, stream: "grpclib.server.Stream[QueryMembersRequest, QueryMembersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.members(request)
        await stream.send_message(response)

    async def __rpc_is_grantee(
        self,
        stream: "grpclib.server.Stream[QueryIsGranteeRequest, QueryIsGranteeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_grantee(request)
        await stream.send_message(response)

    async def __rpc_de(
        self, stream: "grpclib.server.Stream[QueryDeRequest, QueryDeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.de(request)
        await stream.send_message(response)

    async def __rpc_pending_groups(
        self,
        stream: "grpclib.server.Stream[QueryPendingGroupsRequest, QueryPendingGroupsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pending_groups(request)
        await stream.send_message(response)

    async def __rpc_pending_signings(
        self,
        stream: "grpclib.server.Stream[QueryPendingSigningsRequest, QueryPendingSigningsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pending_signings(request)
        await stream.send_message(response)

    async def __rpc_signing(
        self, stream: "grpclib.server.Stream[QuerySigningRequest, QuerySigningResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.signing(request)
        await stream.send_message(response)

    async def __rpc_statuses(
        self,
        stream: "grpclib.server.Stream[QueryStatusesRequest, QueryStatusesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.statuses(request)
        await stream.send_message(response)

    async def __rpc_status(
        self, stream: "grpclib.server.Stream[QueryStatusRequest, QueryStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.status(request)
        await stream.send_message(response)

    async def __rpc_replacements(
        self,
        stream: "grpclib.server.Stream[QueryReplacementsRequest, QueryReplacementsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.replacements(request)
        await stream.send_message(response)

    async def __rpc_replacement(
        self,
        stream: "grpclib.server.Stream[QueryReplacementRequest, QueryReplacementResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.replacement(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/tss.v1beta1.Query/Counts": grpclib.const.Handler(
                self.__rpc_counts,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCountsRequest,
                QueryCountsResponse,
            ),
            "/tss.v1beta1.Query/Group": grpclib.const.Handler(
                self.__rpc_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGroupRequest,
                QueryGroupResponse,
            ),
            "/tss.v1beta1.Query/Members": grpclib.const.Handler(
                self.__rpc_members,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMembersRequest,
                QueryMembersResponse,
            ),
            "/tss.v1beta1.Query/IsGrantee": grpclib.const.Handler(
                self.__rpc_is_grantee,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsGranteeRequest,
                QueryIsGranteeResponse,
            ),
            "/tss.v1beta1.Query/DE": grpclib.const.Handler(
                self.__rpc_de,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDeRequest,
                QueryDeResponse,
            ),
            "/tss.v1beta1.Query/PendingGroups": grpclib.const.Handler(
                self.__rpc_pending_groups,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPendingGroupsRequest,
                QueryPendingGroupsResponse,
            ),
            "/tss.v1beta1.Query/PendingSignings": grpclib.const.Handler(
                self.__rpc_pending_signings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPendingSigningsRequest,
                QueryPendingSigningsResponse,
            ),
            "/tss.v1beta1.Query/Signing": grpclib.const.Handler(
                self.__rpc_signing,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySigningRequest,
                QuerySigningResponse,
            ),
            "/tss.v1beta1.Query/Statuses": grpclib.const.Handler(
                self.__rpc_statuses,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStatusesRequest,
                QueryStatusesResponse,
            ),
            "/tss.v1beta1.Query/Status": grpclib.const.Handler(
                self.__rpc_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStatusRequest,
                QueryStatusResponse,
            ),
            "/tss.v1beta1.Query/Replacements": grpclib.const.Handler(
                self.__rpc_replacements,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReplacementsRequest,
                QueryReplacementsResponse,
            ),
            "/tss.v1beta1.Query/Replacement": grpclib.const.Handler(
                self.__rpc_replacement,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReplacementRequest,
                QueryReplacementResponse,
            ),
        }
