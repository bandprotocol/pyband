# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: bandchain/v1/node/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class QueryChainIdRequest(betterproto.Message):
    """
    QueryChainIDRequest is request type for the Service/ChainID RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryChainIdResponse(betterproto.Message):
    """
    QueryChainIDResponse is response type for the Service/ChainID RPC method.
    """

    chain_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryEvmValidatorsRequest(betterproto.Message):
    """
    QueryEVMValidatorsRequest is request type for the Service/EVMValidators RPC
    method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryEvmValidatorsResponse(betterproto.Message):
    """
    QueryEVMValidatorsResponse is response type for the Service/EVMValidators
    RPC method.
    """

    block_height: int = betterproto.int64_field(1)
    """BlockHeight is the latest block height"""

    validators: List["ValidatorMinimal"] = betterproto.message_field(2)
    """Validators is list of validator's addresss and voting power"""


@dataclass(eq=False, repr=False)
class ValidatorMinimal(betterproto.Message):
    """
    ValidatorMinimal is the data structure for storing validator's address and
    voting power
    """

    address: str = betterproto.string_field(1)
    voting_power: int = betterproto.int64_field(2)


class ServiceStub(betterproto.ServiceStub):
    async def chain_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryChainIdResponse":
        return await self._unary_unary(
            "/bandchain.v1.node.Service/ChainID",
            query_chain_id_request,
            QueryChainIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def evm_validators(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEvmValidatorsResponse":
        return await self._unary_unary(
            "/bandchain.v1.node.Service/EVMValidators",
            query_evm_validators_request,
            QueryEvmValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ServiceBase(ServiceBase):
    async def chain_id(self) -> "QueryChainIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def evm_validators(self) -> "QueryEvmValidatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_chain_id(
        self, stream: "grpclib.server.Stream[QueryChainIdRequest, QueryChainIdResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.chain_id(request)
        await stream.send_message(response)

    async def __rpc_evm_validators(
        self,
        stream: "grpclib.server.Stream[QueryEvmValidatorsRequest, QueryEvmValidatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.evm_validators(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/bandchain.v1.node.Service/ChainID": grpclib.const.Handler(
                self.__rpc_chain_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryChainIdRequest,
                QueryChainIdResponse,
            ),
            "/bandchain.v1.node.Service/EVMValidators": grpclib.const.Handler(
                self.__rpc_evm_validators,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEvmValidatorsRequest,
                QueryEvmValidatorsResponse,
            ),
        }
